[
	{
		"Property": "backgroundColor",
		"Description": "Canvas background color",
		"Default": "#222222",
		"py_name": "background_color"
	},
	{
		"Property": "spaceSize",
		"Description": "Simulation space size (max 8192)",
		"Default": "4096",
		"py_name": "space_size"
	},
	{
		"Property": "nodeColor",
		"Description": "Node color accessor function or hex value",
		"Default": "#b3b3b3",
		"py_name": "node_color"
	},
	{
		"Property": "nodeGreyoutOpacity",
		"Description": "Greyed out node opacity value when the selection is active",
		"Default": "0.1",
		"py_name": "node_greyout_opacity"
	},
	{
		"Property": "nodeSize",
		"Description": "Node size accessor function or value in pixels",
		"Default": "4",
		"py_name": "node_size"
	},
	{
		"Property": "nodeSizeScale",
		"Description": "Scale factor for the node size",
		"Default": "1",
		"py_name": "node_size_scale"
	},
	{
		"Property": "renderHighlightedNodeRing",
		"Description": "Turns the node highlight on hover on / off",
		"Default": "true",
		"py_name": "render_highlighted_node_ring"
	},
	{
		"Property": "highlightedNodeRingColor",
		"Description": "Highlighted node ring color",
		"Default": "undefined",
		"py_name": "highlighted_node_ring_color"
	},
	{
		"Property": "renderLinks",
		"Description": "Turns link rendering on / off",
		"Default": "true",
		"py_name": "render_links"
	},
	{
		"Property": "linkColor",
		"Description": "Link color accessor function or hex value",
		"Default": "#666666",
		"py_name": "link_color"
	},
	{
		"Property": "linkGreyoutOpacity",
		"Description": "Greyed out link opacity value when the selection is active",
		"Default": "0.1",
		"py_name": "link_greyout_opacity"
	},
	{
		"Property": "linkWidth",
		"Description": "Link width accessor function or value in pixels",
		"Default": "1",
		"py_name": "link_width"
	},
	{
		"Property": "linkWidthScale",
		"Description": "Scale factor for the link width",
		"Default": "1",
		"py_name": "link_width_scale"
	},
	{
		"Property": "linkArrows",
		"Description": "Turns link arrow rendering on / off",
		"Default": "true",
		"py_name": "link_arrows"
	},
	{
		"Property": "linkArrowsSizeScale",
		"Description": "Scale factor for the link arrows size",
		"Default": "1",
		"py_name": "link_arrows_size_scale"
	},
	{
		"Property": "linkVisibilityDistanceRange",
		"Description": "The range defines the minimum and maximum link visibility distance in pixels. The link will be fully opaque when its length is less than the first number in the array, and will have linkVisibilityMinTransparency transparency when its length is greater than the second number in the array. This distance is defined in screen space coordinates and will change as you zoom in and out (e.g. links become longer when you zoom in, and shorter when you zoom out).",
		"Default": "[50, 150]",
		"py_name": "link_visibility_distance_range"
	},
	{
		"Property": "linkVisibilityMinTransparency",
		"Description": "The transparency value that the link will have when its length reaches the maximum link distance value from linkVisibilityDistanceRange.",
		"Default": "0.25",
		"py_name": "link_visibility_min_transparency"
	},
	{
		"Property": "useQuadtree",
		"Description": "Use the classic quadtree algorithm for the Many-Body force. This property will be applied only on component initialization and it can't be changed using the setConfig method. âš  The algorithm might not work on some GPUs (e.g. Nvidia) and on Windows (unless you disable ANGLE in the browser settings).",
		"Default": "false",
		"py_name": "use_quadtree"
	},
	{
		"Property": "simulation",
		"Description": "Simulation parameters and event listeners",
		"Default": "See Simulation configuration table for more details",
		"py_name": "simulation"
	},
	{
		"Property": "events.onClick",
		"Description": "Callback function that will be called on every canvas click. If clicked on a node, its data will be passed as the first argument, index as the second argument, position as the third argument and the corresponding mouse event as the forth argument: (node: Node | undefined, index: number | undefined, nodePosition: [number, number] | undefined, event: MouseEvent) => void",
		"Default": "undefined",
		"py_name": "events_on_click"
	},
	{
		"Property": "events.onMouseMove",
		"Description": "Callback function that will be called when mouse movement happens. If the mouse moves over a node, its data will be passed as the first argument, index as the second argument, position as the third argument and the corresponding mouse event as the forth argument: (node: Node | undefined, index: number | undefined, nodePosition: [number, number] | undefined, event: MouseEvent) => void",
		"Default": "undefined",
		"py_name": "events_on_mouse_move"
	},
	{
		"Property": "events.onNodeMouseOver",
		"Description": "Callback function that will be called when a node appears under the mouse as a result of a mouse event, zooming and panning, or movement of nodes. The node data will be passed as the first argument, index as the second argument, position as the third argument and the corresponding mouse event or D3's zoom event as the forth argument: (node: Node, index: number, nodePosition: [number, number], event: MouseEvent | D3ZoomEvent | undefined) => void",
		"Default": "undefined",
		"py_name": "events_on_node_mouse_over"
	},
	{
		"Property": "events.onNodeMouseOut",
		"Description": "Callback function that will be called when node is no longer underneath the mouse pointer because of a mouse event, zoom/pan event, or movement of nodes. The corresponding mouse event or D3's zoom event will be passed as the first argument: (event: MouseEvent | D3ZoomEvent | undefined) => void",
		"Default": "undefined",
		"py_name": "events_on_node_mouse_out"
	},
	{
		"Property": "events.onZoomStart",
		"Description": "Callback function that will be called when zooming or panning starts. First argument is a D3 Zoom Event and second indicates whether the event has been initiated by a user interaction (e.g. a mouse event): (event: D3ZoomEvent, userDriven: boolean) => void",
		"Default": "undefined",
		"py_name": "events_on_zoom_start"
	},
	{
		"Property": "events.onZoom",
		"Description": "Callback function that will be called continuously during zooming or panning. First argument is a D3 Zoom Event and second indicates whether the event has been initiated by a user interaction (e.g. a mouse event): (event: D3ZoomEvent, userDriven: boolean) => void",
		"Default": "undefined",
		"py_name": "events_on_zoom"
	},
	{
		"Property": "events.onZoomEnd",
		"Description": "Callback function that will be called when zooming or panning ends. First argument is a D3 Zoom Event and second indicates whether the event has been initiated by a user interaction (e.g. a mouse event): (event: D3ZoomEvent, userDriven: boolean) => void",
		"Default": "undefined",
		"py_name": "events_on_zoom_end"
	},
	{
		"Property": "showFPSMonitor",
		"Description": "Show WebGL performance monitor",
		"Default": "false",
		"py_name": "show_fpsmonitor"
	},
	{
		"Property": "pixelRatio",
		"Description": "Canvas pixel ratio",
		"Default": "2",
		"py_name": "pixel_ratio"
	},
	{
		"Property": "scaleNodesOnZoom",
		"Description": "Scale the nodes when zooming in or out",
		"Default": "true",
		"py_name": "scale_nodes_on_zoom"
	},
	{
		"Property": "randomSeed",
		"Description": "Providing a randomSeed value allows you to control the randomness of the layout across different simulation runs. It is useful when you want the graph to always look the same on same datasets. This property will be applied only on component initialization and it can't be changed using the setConfig method.",
		"Default": "undefined",
		"py_name": "random_seed"
	}
]
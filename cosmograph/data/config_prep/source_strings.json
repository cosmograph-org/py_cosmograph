{
    "cosmos/variables.ts": "export const defaultNodeColor = '#b3b3b3'\nexport const defaultGreyoutNodeOpacity = 0.1\nexport const defaultNodeSize = 4\nexport const defaultLinkColor = '#666666'\nexport const defaultGreyoutLinkOpacity = 0.1\nexport const defaultLinkWidth = 1\nexport const defaultBackgroundColor = '#222222'\n\nexport const defaultConfigValues = {\n  disableSimulation: false,\n  spaceSize: 4096,\n  nodeSizeScale: 1,\n  linkWidthScale: 1,\n  arrowSizeScale: 1,\n  renderLinks: true,\n  curvedLinks: false,\n  curvedLinkSegments: 19,\n  curvedLinkWeight: 0.8,\n  curvedLinkControlPointDistance: 0.5,\n  arrowLinks: true,\n  linkVisibilityDistanceRange: [50, 150],\n  linkVisibilityMinTransparency: 0.25,\n  hoveredNodeRingColor: 'white',\n  focusedNodeRingColor: 'white',\n  useQuadtree: false,\n  simulation: {\n    decay: 1000,\n    gravity: 0,\n    center: 0,\n    repulsion: 0.1,\n    repulsionTheta: 1.7,\n    repulsionQuadtreeLevels: 12,\n    linkSpring: 1,\n    linkDistance: 2,\n    linkDistRandomVariationRange: [1, 1.2],\n    repulsionFromMouse: 2,\n    friction: 0.85,\n  },\n  showFPSMonitor: false,\n  pixelRatio: 2,\n  scaleNodesOnZoom: true,\n  disableZoom: false,\n  fitViewOnInit: true,\n  fitViewDelay: 250,\n  nodeSamplingDistance: 150,\n}\n\nexport const hoveredNodeRingOpacity = 0.7\nexport const focusedNodeRingOpacity = 0.95\nexport const defaultScaleToZoom = 3\n",
    "cosmos/config.ts": "import { D3ZoomEvent } from 'd3-zoom'\nimport { D3DragEvent } from 'd3-drag'\nimport {\n  defaultPointColor,\n  defaultGreyoutPointOpacity,\n  defaultPointSize,\n  defaultLinkColor,\n  defaultGreyoutLinkOpacity,\n  defaultLinkWidth,\n  defaultBackgroundColor,\n  defaultConfigValues,\n} from '@/graph/variables'\nimport { isPlainObject } from '@/graph/helper'\nimport { type Hovered } from '@/graph/modules/Store'\n\nexport interface GraphConfigInterface {\n  /**\n   * TODO: rethink the logic of `disableSimulation` param \ud83d\udc47.\n   * Do not run the simulation, just render the graph.\n   * Cosmos uses the x and y values of the points\u2019 data to determine their position in the graph.\n   * If x and y values are not specified, the position of the points will be assigned randomly.\n   * This property will be applied only on component initialization and it\n   * can't be changed using the `setConfig` method.\n   * Default value: `false`\n   */\n  disableSimulation?: boolean;\n  /**\n   * Canvas background color.\n   * Can be either a hex color string (e.g., '#b3b3b3') or an array of RGBA values.\n   * Default value: '#222222'\n   */\n  backgroundColor?: string | [number, number, number, number];\n  /**\n   * Simulation space size (max 8192).\n   * Default value: `4096`\n   */\n  spaceSize?: number;\n\n  /**\n   * The default color to use for points when no point colors are provided,\n   * or if the color value in the array is `undefined` or `null`.\n   * This can be either a hex color string (e.g., '#b3b3b3') or an array of RGBA values\n   * in the format `[red, green, blue, alpha]` where each value is a number between 0 and 255.\n   * Default value: '#b3b3b3'\n   */\n  defaultPointColor?: string | [number, number, number, number];\n\n  /**\n   * Greyed out point opacity value when the selection is active.\n   * Default value: `0.1`\n  */\n  pointGreyoutOpacity?: number;\n  /**\n   * The default size value to use for points when no point sizes are provided or\n   * if the size value in the array is `undefined` or `null`.\n   * Default value: `4`\n  */\n  defaultPointSize?: number;\n  /**\n   * Scale factor for the point size.\n   * Default value: `1`\n   */\n  pointSizeScale?: number;\n\n  /**\n   * Cursor style to use when hovering over a point\n   * Default value: `auto`\n   */\n  hoveredPointCursor?: string;\n\n  /**\n   * Turns ring rendering around a point on hover on / off\n   * Default value: `false`\n   */\n  renderHoveredPointRing?: boolean;\n\n  /**\n   * Hovered point ring color hex value.\n   * Can be either a hex color string (e.g., '#b3b3b3') or an array of RGBA values.\n   * Default value: `white`\n   */\n  hoveredPointRingColor?: string | [number, number, number, number];\n\n  /**\n   * Focused point ring color hex value.\n   * Can be either a hex color string (e.g., '#b3b3b3') or an array of RGBA values.\n   * Default value: `white`\n   */\n  focusedPointRingColor?: string | [number, number, number, number];\n\n  /**\n   * Set focus on a point by index.  A ring will be highlighted around the focused point.\n   * Has priority over the `setFocusedPointByIndex` method.\n   * When set to `undefined`, no point is focused.\n   * Default value: `undefined`\n   */\n  focusedPointIndex?: number;\n\n  /**\n   * Turns link rendering on / off.\n   * Default value: `true`\n   */\n  renderLinks?: boolean;\n\n  /**\n   * The default color to use for links when no link colors are provided,\n   * or if the color value in the array is `undefined` or `null`.\n   * This can be either a hex color string (e.g., '#666666') or an array of RGBA values\n   * in the format `[red, green, blue, alpha]` where each value is a number between 0 and 255.\n   * Default value: '#666666'\n   */\n  defaultLinkColor?: string | [number, number, number, number];\n\n  /**\n   * Greyed out link opacity value when the selection is active.\n   * Default value: `0.1`\n  */\n  linkGreyoutOpacity?: number;\n  /**\n   * The default width value to use for links when no link widths are provided or if the width value in the array is `undefined` or `null`.\n   * Default value: `1`\n  */\n  defaultLinkWidth?: number;\n  /**\n   * Scale factor for the link width.\n   * Default value: `1`\n   */\n  linkWidthScale?: number;\n  /**\n   * If set to true, links are rendered as curved lines.\n   * Otherwise as straight lines.\n   * Default value: `false`\n   */\n  curvedLinks?: boolean;\n  /**\n   * Number of segments in a curved line.\n   * Default value: `19`.\n   */\n  curvedLinkSegments?: number;\n  /**\n   * Weight affects the shape of the curve.\n   * Default value: `0.8`.\n   */\n  curvedLinkWeight?: number;\n  /**\n   * Defines the position of the control point of the curve on the normal from the centre of the line.\n   * If set to 1 then the control point is at a distance equal to the length of the line.\n   * Default value: `0.5`\n   */\n  curvedLinkControlPointDistance?: number;\n  /**\n   * The default link arrow value that controls whether or not to display link arrows.\n   * Default value: `false`\n   */\n  defaultLinkArrows?: boolean;\n  /**\n   * Scale factor for the link arrows size.\n   * Default value: `1`\n   */\n  linkArrowsSizeScale?: number;\n  /**\n   * The range defines the minimum and maximum link visibility distance in pixels.\n   * The link will be fully opaque when its length is less than the first number in the array,\n   * and will have `linkVisibilityMinTransparency` transparency when its length is greater than\n   * the second number in the array.\n   * This distance is defined in screen space coordinates and will change as you zoom in and out\n   * (e.g. links become longer when you zoom in, and shorter when you zoom out).\n   * Default value: `[50, 150]`\n   */\n  linkVisibilityDistanceRange?: number[];\n  /**\n   * The transparency value that the link will have when its length reaches\n   * the maximum link distance value from `linkVisibilityDistanceRange`.\n   * Default value: `0.25`\n   */\n  linkVisibilityMinTransparency?: number;\n  /**\n   * Use the classic quadtree algorithm for the Many-Body force.\n   * This property will be applied only on component initialization and it\n   * can't be changed using the `setConfig` method.\n   * Default value: `false`\n   */\n  useQuadtree?: boolean;\n\n  /**\n   * Decay coefficient. Use smaller values if you want the simulation to \"cool down\" slower.\n   * Default value: `5000`\n   */\n  simulationDecay?: number;\n    /**\n   * Gravity force coefficient.\n   * Default value: `0.25`\n   */\n    simulationGravity?: number;\n  /**\n   * Centering to center mass force coefficient.\n   * Default value: `0`\n   */\n  simulationCenter?: number;\n  /**\n   * Repulsion force coefficient.\n   * Default value: `1.0`\n   */\n  simulationRepulsion?: number;\n  /**\n   * Decreases / increases the detalization of the Many-Body force calculations.\n   * When `useQuadtree` is set to `true`, this property corresponds to the Barnes\u2013Hut approximation criterion.\n   * Default value: `1.15`\n   */\n  simulationRepulsionTheta?: number;\n  /**\n   * Barnes\u2013Hut approximation depth.\n   * Can only be used when `useQuadtree` is set `true`.\n   * Default value: `12`\n   */\n  simulationRepulsionQuadtreeLevels?: number;\n  /**\n   * Link spring force coefficient.\n   * Default value: `1`\n   */\n  simulationLinkSpring?: number;\n  /**\n   * Minimum link distance.\n   * Default value: `10`\n   */\n  simulationLinkDistance?: number;\n  /**\n   * Range of random link distance values.\n   * Default value: `[1, 1.2]`\n   */\n  simulationLinkDistRandomVariationRange?: number[];\n  /**\n   * Repulsion coefficient from mouse position.\n   * The repulsion force is activated by pressing the right mouse button.\n   * Default value: `2`\n   */\n  simulationRepulsionFromMouse?: number;\n  /**\n   * Friction coefficient.\n   * Default value: `0.85`\n   */\n  simulationFriction?: number;\n  /**\n   * Cluster coefficient.\n   * Default value: `0.1`\n   */\n  simulationCluster?: number;\n\n  /**\n   * Callback function that will be called when the simulation starts.\n   * Default value: `undefined`\n   */\n  onSimulationStart?: () => void;\n  /**\n   * Callback function that will be called on every simulation tick.\n   * The value of the first argument `alpha` will decrease over time as the simulation \"cools down\".\n   * If there's a point under the mouse pointer, its index will be passed as the second argument\n   * and position as the third argument:\n   * `(alpha: number, hoveredIndex: number | undefined, pointPosition: [number, number] | undefined) => void`.\n   * Default value: `undefined`\n   */\n  onSimulationTick?: (\n    alpha: number, hoveredIndex?: number, pointPosition?: [number, number]\n    ) => void;\n  /**\n   * Callback function that will be called when the simulation stops.\n   * Default value: `undefined`\n   */\n  onSimulationEnd?: () => void;\n  /**\n   * Callback function that will be called when the simulation gets paused.\n   * Default value: `undefined`\n   */\n  onSimulationPause?: () => void;\n  /**\n   * Callback function that will be called when the simulation is restarted.\n   * Default value: `undefined`\n   */\n  onSimulationRestart?: () => void;\n\n  /**\n   * Callback function that will be called on every canvas click.\n   * If clicked on a point, its index will be passed as the first argument,\n   * position as the second argument and the corresponding mouse event as the third argument:\n   * `(index: number | undefined, pointPosition: [number, number] | undefined, event: MouseEvent) => void`.\n   * Default value: `undefined`\n   */\n  onClick?: (\n    index: number | undefined, pointPosition: [number, number] | undefined, event: MouseEvent\n  ) => void;\n\n  /**\n   * Callback function that will be called when mouse movement happens.\n   * If the mouse moves over a point, its index will be passed as the first argument,\n   * position as the second argument and the corresponding mouse event as the third argument:\n   * `(index: number | undefined, pointPosition: [number, number] | undefined, event: MouseEvent) => void`.\n   * Default value: `undefined`\n   */\n  onMouseMove?: (\n    index: number | undefined, pointPosition: [number, number] | undefined, event: MouseEvent\n  ) => void;\n\n  /**\n   * Callback function that will be called when a point appears under the mouse\n   * as a result of a mouse event, zooming and panning, or movement of points.\n   * The point index will be passed as the first argument, position as the second argument\n   * and the corresponding mouse event or D3's zoom event as the third argument:\n   * `(index: number, pointPosition: [number, number], event: MouseEvent | D3DragEvent<HTMLCanvasElement, undefined, Hovered>\n   * | D3ZoomEvent<HTMLCanvasElement, undefined> | undefined) => void`.\n   * Default value: `undefined`\n   */\n  onPointMouseOver?: (\n    index: number,\n    pointPosition: [number, number],\n    event: MouseEvent | D3DragEvent<HTMLCanvasElement, undefined, Hovered> | D3ZoomEvent<HTMLCanvasElement, undefined> | undefined\n  ) => void;\n\n  /**\n   * Callback function that will be called when a point is no longer underneath\n   * the mouse pointer because of a mouse event, zoom/pan event, or movement of points.\n   * The corresponding mouse event or D3's zoom event will be passed as the first argument:\n   * `(event: MouseEvent | D3ZoomEvent<HTMLCanvasElement, undefined> | D3DragEvent<HTMLCanvasElement, undefined, Hovered> | undefined) => void`.\n   * Default value: `undefined`\n   */\n  onPointMouseOut?: (event: MouseEvent | D3ZoomEvent<HTMLCanvasElement, undefined> | D3DragEvent<HTMLCanvasElement, undefined, Hovered> | undefined) => void;\n\n  /**\n   * Callback function that will be called when zooming or panning starts.\n   * First argument is a D3 Zoom Event and second indicates whether\n   * the event has been initiated by a user interaction (e.g. a mouse event):\n   * `(event: D3ZoomEvent, userDriven: boolean) => void`.\n   * Default value: `undefined`\n   */\n  onZoomStart?: (e: D3ZoomEvent<HTMLCanvasElement, undefined>, userDriven: boolean) => void;\n\n  /**\n   * Callback function that will be called continuously during zooming or panning.\n   * First argument is a D3 Zoom Event and second indicates whether\n   * the event has been initiated by a user interaction (e.g. a mouse event):\n   * `(event: D3ZoomEvent, userDriven: boolean) => void`.\n   * Default value: `undefined`\n   */\n  onZoom?: (e: D3ZoomEvent<HTMLCanvasElement, undefined>, userDriven: boolean) => void;\n\n  /**\n   * Callback function that will be called when zooming or panning ends.\n   * First argument is a D3 Zoom Event and second indicates whether\n   * the event has been initiated by a user interaction (e.g. a mouse event):\n   * `(event: D3ZoomEvent, userDriven: boolean) => void`.\n   * Default value: `undefined`\n   */\n  onZoomEnd?: (e: D3ZoomEvent<HTMLCanvasElement, undefined>, userDriven: boolean) => void;\n\n  /**\n   * Callback function that will be called when dragging starts.\n   * First argument is a D3 Drag Event:\n   * `(event: D3DragEvent) => void`.\n   * Default value: `undefined`\n   */\n  onDragStart?: (e: D3DragEvent<HTMLCanvasElement, undefined, Hovered>) => void;\n\n  /**\n   * Callback function that will be called continuously during dragging.\n   * First argument is a D3 Drag Event:\n   * `(event: D3DragEvent) => void`.\n   * Default value: `undefined`\n   */\n  onDrag?: (e: D3DragEvent<HTMLCanvasElement, undefined, Hovered>) => void;\n\n  /**\n   * Callback function that will be called when dragging ends.\n   * First argument is a D3 Drag Event:\n   * `(event: D3DragEvent) => void`.\n   * Default value: `undefined`\n   */\n  onDragEnd?: (e: D3DragEvent<HTMLCanvasElement, undefined, Hovered>) => void;\n\n  /**\n   * Show WebGL performance monitor.\n   * Default value: `false`\n   */\n  showFPSMonitor?: boolean;\n  /**\n   * Canvas pixel ratio.\n   * Default value: `2`\n   */\n  pixelRatio?: number;\n  /**\n   * Increase or decrease the size of the points when zooming in or out.\n   * Default value: true\n   */\n  scalePointsOnZoom?: boolean;\n  /**\n   * Initial zoom level. Can be set once during graph initialization.\n   * Default value: `undefined`\n   */\n  initialZoomLevel?: number;\n  /**\n   * Disables zooming in and out.\n   * Default: `false`\n   */\n  disableZoom?: boolean;\n  /**\n   * Enables or disables dragging of points in the graph.\n   * Default value: `false`\n   */\n  enableDrag?: boolean;\n  /**\n   * Whether to center and zoom the view to fit all points in the scene on initialization or not.\n   * Default: `true`\n   */\n  fitViewOnInit?: boolean;\n  /**\n   * Delay in milliseconds before fitting the view when `fitViewOnInit` is enabled.\n   * Useful if you want the layout to stabilize a bit before fitting.\n   * Default: `250`\n   */\n  fitViewDelay?: number;\n  /**\n   * Padding to apply when fitting the view to show all points.\n   * This value is added to the calculated bounding box to provide some extra space around the points.\n   * This is used when the `fitViewOnInit` option is enabled.\n   * Default: `0.1`\n   */\n  fitViewPadding?: number;\n  /**\n   * Duration in milliseconds for fitting the view to show all points when fitViewOnInit is enabled.\n   * Default: `250`\n   */\n  fitViewDuration?: number;\n  /**\n   * When `fitViewOnInit` is set to `true`, fits the view to show the points within a rectangle\n   * defined by its two corner coordinates `[[left, bottom], [right, top]]` in the scene space.\n   * Default: `undefined`\n   */\n  fitViewByPointsInRect?: [[number, number], [number, number]] | [number, number][];\n  /**\n   * Providing a `randomSeed` value allows you to control\n   * the randomness of the layout across different simulation runs.\n   * It is useful when you want the graph to always look the same on same datasets.\n   * This property will be applied only on component initialization and it\n   * can't be changed using the `setConfig` method.\n   * Default value: undefined\n   */\n  randomSeed?: number | string;\n  /**\n   * Point sampling distance in pixels between neighboring points when calling the `getSampledPointPositionsMap` method.\n   * This parameter determines how many points will be included in the sample.\n   * Default value: `150`\n  */\n  pointSamplingDistance?: number;\n}\n\nexport class GraphConfig implements GraphConfigInterface {\n  public disableSimulation = defaultConfigValues.disableSimulation\n  public backgroundColor = defaultBackgroundColor\n  public spaceSize = defaultConfigValues.spaceSize\n  public defaultPointColor = defaultPointColor\n  public pointGreyoutOpacity = defaultGreyoutPointOpacity\n  public defaultPointSize = defaultPointSize\n  public pointSizeScale = defaultConfigValues.pointSizeScale\n  public hoveredPointCursor = defaultConfigValues.hoveredPointCursor\n  public renderHoveredPointRing = defaultConfigValues.renderHoveredPointRing\n  public hoveredPointRingColor = defaultConfigValues.hoveredPointRingColor\n  public focusedPointRingColor = defaultConfigValues.focusedPointRingColor\n  public focusedPointIndex = defaultConfigValues.focusedPointIndex\n  public defaultLinkColor = defaultLinkColor\n  public linkGreyoutOpacity = defaultGreyoutLinkOpacity\n  public defaultLinkWidth = defaultLinkWidth\n  public linkWidthScale = defaultConfigValues.linkWidthScale\n  public renderLinks = defaultConfigValues.renderLinks\n  public curvedLinks = defaultConfigValues.curvedLinks\n  public curvedLinkSegments = defaultConfigValues.curvedLinkSegments\n  public curvedLinkWeight = defaultConfigValues.curvedLinkWeight\n  public curvedLinkControlPointDistance = defaultConfigValues.curvedLinkControlPointDistance\n  public defaultLinkArrows = defaultConfigValues.arrowLinks\n  public linkArrowsSizeScale = defaultConfigValues.arrowSizeScale\n  public linkVisibilityDistanceRange = defaultConfigValues.linkVisibilityDistanceRange\n  public linkVisibilityMinTransparency = defaultConfigValues.linkVisibilityMinTransparency\n  public useQuadtree = defaultConfigValues.useQuadtree\n\n  public simulationDecay = defaultConfigValues.simulation.decay\n  public simulationGravity = defaultConfigValues.simulation.gravity\n  public simulationCenter = defaultConfigValues.simulation.center\n  public simulationRepulsion = defaultConfigValues.simulation.repulsion\n  public simulationRepulsionTheta = defaultConfigValues.simulation.repulsionTheta\n  public simulationRepulsionQuadtreeLevels = defaultConfigValues.simulation.repulsionQuadtreeLevels\n  public simulationLinkSpring = defaultConfigValues.simulation.linkSpring\n  public simulationLinkDistance = defaultConfigValues.simulation.linkDistance\n  public simulationLinkDistRandomVariationRange = defaultConfigValues.simulation.linkDistRandomVariationRange\n  public simulationRepulsionFromMouse = defaultConfigValues.simulation.repulsionFromMouse\n  public simulationFriction = defaultConfigValues.simulation.friction\n  public simulationCluster = defaultConfigValues.simulation.cluster\n\n  public onSimulationStart: GraphConfigInterface['onSimulationStart'] = undefined\n  public onSimulationTick: GraphConfigInterface['onSimulationTick'] = undefined\n  public onSimulationEnd: GraphConfigInterface['onSimulationEnd'] = undefined\n  public onSimulationPause: GraphConfigInterface['onSimulationPause'] = undefined\n  public onSimulationRestart: GraphConfigInterface['onSimulationRestart'] = undefined\n\n  public onClick: GraphConfigInterface['onClick'] = undefined\n  public onMouseMove: GraphConfigInterface['onMouseMove'] = undefined\n  public onPointMouseOver: GraphConfigInterface['onPointMouseOver'] = undefined\n  public onPointMouseOut: GraphConfigInterface['onPointMouseOut'] = undefined\n  public onZoomStart: GraphConfigInterface['onZoomStart'] = undefined\n  public onZoom: GraphConfigInterface['onZoom'] = undefined\n  public onZoomEnd: GraphConfigInterface['onZoomEnd'] = undefined\n  public onDragStart: GraphConfigInterface['onDragStart'] = undefined\n  public onDrag: GraphConfigInterface['onDrag'] = undefined\n  public onDragEnd: GraphConfigInterface['onDragEnd'] = undefined\n\n  public showFPSMonitor = defaultConfigValues.showFPSMonitor\n\n  public pixelRatio = defaultConfigValues.pixelRatio\n\n  public scalePointsOnZoom = defaultConfigValues.scalePointsOnZoom\n  public initialZoomLevel = undefined\n  public disableZoom = defaultConfigValues.disableZoom\n  public enableDrag = defaultConfigValues.enableDrag\n  public fitViewOnInit = defaultConfigValues.fitViewOnInit\n  public fitViewDelay = defaultConfigValues.fitViewDelay\n  public fitViewPadding = defaultConfigValues.fitViewPadding\n  public fitViewDuration = defaultConfigValues.fitViewDuration\n  public fitViewByPointsInRect = undefined\n\n  public randomSeed = undefined\n  public pointSamplingDistance = defaultConfigValues.pointSamplingDistance\n\n  public init (config: GraphConfigInterface): void {\n    (Object.keys(config) as (keyof GraphConfigInterface)[])\n      .forEach(configParameter => {\n        this.deepMergeConfig(this.getConfig(), config, configParameter)\n      })\n  }\n\n  public deepMergeConfig <T> (current: T, next: T, key: keyof T): void {\n    if (isPlainObject(current[key]) && isPlainObject(next[key])) {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      (Object.keys(next[key] as Object) as (keyof T[keyof T])[])\n        .forEach(configParameter => {\n          this.deepMergeConfig(current[key], next[key], configParameter)\n        })\n    } else current[key] = next[key]\n  }\n\n  private getConfig (): GraphConfigInterface {\n    return this\n  }\n}\n",
    "cosmograph/config.ts": "import { GraphConfigInterface, GraphEvents } from '@cosmograph/cosmos'\nimport { CosmographData, CosmographDataConfig } from './data'\nimport { LabelsCosmographConfig } from './labels'\nimport { SimulationConfig, SimulationEventConfig } from './simulation'\n\nexport const defaultCosmographConfig: CosmographConfig = {\n  disableSimulation: null,\n  showTopLabelsLimit: 100,\n  showHoveredPointLabel: false,\n  staticLabelWeight: 0.8,\n  dynamicLabelWeight: 0.7,\n  labelMargin: 5,\n  labelPadding: { left: 7, top: 4, right: 7, bottom: 4 },\n  // useSampling: false,\n  // sampleLinks: false,s\n  // sampledPointsCount: 5000,\n  // sampledLinksCount: 5000,\n}\n\nexport interface BasicConfig {\n  /**\n   * Do not run the simulation, just render the graph.\n   * Cosmos uses the x and y values of the points' data to determine their position in the graph.\n   * If x and y values are not specified, the position of the points will be assigned randomly.\n   * If the value is set to null and the data does not have any links,\n   * Cosmograph will automatically set this value to `true`.\n   *\n   * Default value: `null`\n   */\n  disableSimulation?: boolean | null;\n\n  /**\n   * Specifies the CSS class to use for the rectangular selector.\n   */\n  rectangularSelectorClassName?: string;\n}\n\nexport interface CallbackConfig {\n  /**\n   * Callback function that will be called when the points was filtered by point crossfilter.\n   *\n   * @param {CosmographData} index - A `Table` of filtered points.\n   */\n  onPointsFiltered?: (filteredPoints: CosmographData) => void;\n\n  /**\n   * Callback function that will be called when the links was filtered by link crossfilter.\n   *\n   * @param {CosmographData} index - A `Table` of filtered links.\n   */\n  onLinksFiltered?: (filteredLinks: CosmographData) => void;\n\n  /**\n   * Callback function that will be called when clicked on a label.\n   *\n   * @param {number} index - Point index for this label.\n   * @param {string} id - Point id for this label.\n   * @param {MouseEvent} event - Corresponding mouse event.\n   */\n  onLabelClick?: (index: number, id: string, event: MouseEvent) => void;\n\n  /**\n   * Callback function that executes after the graph completes rendering with new data.\n   *\n   * @param {number} data.pointsCount - Number of rendered points in the graph.\n   * @param {number} data.linksCount - Number of rendered links in the graph.\n   * @param {Record<string, unknown>[]} [data.pointsSummary] - Summary information for the rendered points.\n   * @param {Record<string, unknown>[]} [data.linksSummary] - Summary information for the rendered links.\n   */\n  onDataUpdated?: ({ pointsCount, linksCount, pointsSummary, linksSummary }:\n  { pointsCount: number; linksCount: number; pointsSummary?: Record<string, unknown>[]; linksSummary?: Record<string, unknown>[] }) => void;\n\n  /**\n   * Callback function that will be called when area selection was performed.\n   *\n   * @param {[[number, number], [number, number]] | null} selection  \u2014 The selected area or `null` if the selection was cleared.\n   */\n  onAreaSelected?: (selection: [[number, number], [number, number]] | null) => void;\n}\n\nexport interface CosmographConfig extends\n  BasicConfig,\n  CallbackConfig,\n  SimulationConfig,\n  SimulationEventConfig,\n  CosmographDataConfig,\n  LabelsCosmographConfig,\n  GraphEvents,\n  Omit<GraphConfigInterface, 'events' | 'simulation' | 'disableSimulation'> {}\n\n\n",
    "cosmograph/data.ts": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { Table } from 'apache-arrow'\nimport { CosmographConfig } from './config'\n\n/**\n * Represents the data operated by the Cosmograph.\n *\n * The data is stored in the Apache Arrow `Table` format, which is a fast and efficient way to store and process large amounts of data.\n *\n * For more information on the `Table` format, see the [Apache Arrow documentation](https://arrow.apache.org/docs/js/classes/Arrow_dom.Table.html).\n */\nexport type CosmographData = Table\n\nexport const RequiredPointsConfigKeys = {\n  Points: 'points',\n  PointId: 'pointId',\n  PointIndex: 'pointIndex',\n} as const\n\nexport const BasePointsConfigKeys = {\n  PointColor: 'pointColor',\n  PointColorFn: 'pointColorFn',\n  PointSize: 'pointSize',\n  PointSizeFn: 'pointSizeFn',\n  PointLabel: 'pointLabel',\n  PointLabelWeight: 'pointLabelWeight',\n  PointX: 'pointX',\n  PointY: 'pointY',\n  PointIncludeColumns: 'pointIncludeColumns',\n} as const\n\nexport const RequiredLinksConfigKeys = {\n  Links: 'links',\n  LinkSource: 'linkSource',\n  LinkSourceIndex: 'linkSourceIndex',\n  LinkTarget: 'linkTarget',\n  LinkTargetIndex: 'linkTargetIndex',\n} as const\n\nexport const BaseLinksConfigKeys = {\n  LinkColor: 'linkColor',\n  LinkColorFn: 'linkColorFn',\n  LinkWidth: 'linkWidth',\n  LinkWidthFn: 'linkWidthFn',\n  LinkArrow: 'linkArrow',\n  LinkArrowFn: 'linkArrowFn',\n  LinkStrength: 'linkStrength',\n  LinkStrengthFn: 'linkStrengthFn',\n  LinkIncludeColumns: 'linkIncludeColumns',\n} as const\n\nexport interface CosmographPointsConfig {\n  /** Input data for the points.\n   *\n   * {@link CosmographInputData} Accepts `File | string | Table | Uint8Array | ArrayBuffer | Record<string, unknown>[]` */\n  [RequiredPointsConfigKeys.Points]?: CosmographInputData;\n\n  /** Unique identifier column for each point. Required for mapping links to points correctly. */\n  [RequiredPointsConfigKeys.PointId]?: string;\n\n  /** Numeric index column for each point. Used for efficient lookups and should be a sequential integer starting from 0. */\n  [RequiredPointsConfigKeys.PointIndex]?: string;\n\n  /** The column name for the point color. If provided, points will be colored based on the values in this column, which should be either a color `string` or an array of numeric `[r, g, b, a]` values.\n   */\n  [BasePointsConfigKeys.PointColor]?: string;\n\n  /** Specifies the function that will be used to generate the color for each point based on the value in the `pointColor` column. It takes a point record as input and its index, and should return a color `string` or an array of `[r, g, b, a]` values.\n   *\n   * Works only when `pointColor` is provided. Overrides the values in `pointColor` column by processing them (in this case the values in the `pointColor` column can be of any type, not just colors).\n   *\n   * @param {any} value - The value from the `PointColor` column.\n   * @param {number} index - The index of the point.\n   * @returns {string | [number, number, number, number]} The color as a `string` or an array of `[r, g, b, a]` value to be applied to the point.\n   */\n  [BasePointsConfigKeys.PointColorFn]?: AccessorFn<string | [number, number, number, number]>;\n\n  /**\n   * The column name for the point size.\n   * If provided, points will be sized based on the values in this column, which should be numeric values.\n   */\n  [BasePointsConfigKeys.PointSize]?: string;\n\n  /** Specifies the function that will be used to generate the size for each point based on the value in the `pointSize` column.\n   * It takes a point record as input and its index, and should return a numeric value.\n   *\n   * Works only when `pointSize` is provided.\n   * Overrides the values in the `pointSize` column by processing them (in this case the values in the `pointSize` column can be of any type, not just numbers).\n   *\n   * If `null`, use `pointSize` values as-is. If `undefined`, uses an auto-generated function that scales `pointSize` values to the range `[2, 9]`\n   *\n   * @param {any} value - The value from the `pointSize` column.\n   * @param {number} index - The index of the point.\n   * @returns {number} The numeric size value to be applied to the point.\n   */\n  [BasePointsConfigKeys.PointSizeFn]?: AccessorFn<number> | null;\n\n  /** The column name for the point label. */\n  [BasePointsConfigKeys.PointLabel]?: string;\n\n  /** The column name for the point label weight. Accepts float values from 0 to 1.\n   * Higher weights make labels more likely to be shown. */\n  [BasePointsConfigKeys.PointLabelWeight]?: string;\n\n  /** The column name for the point's x-coordinate.\n   * If provided with `pointY`, points will be positioned based on the values from `pointX` and `pointY` columns. */\n  [BasePointsConfigKeys.PointX]?: string;\n\n  /** The column name for the point's y-coordinate.\n   * If provided with `pointX`, points will be positioned based on the values from `pointX` and `pointY` columns. */\n  [BasePointsConfigKeys.PointY]?: string;\n\n  /** An array of additional column names to include in the point data.\n   *\n   * These columns will be available on the point objects but not used by Cosmograph directly, can be used as accessors for Cosmograph comopnents.\n   * Useful for storing additional information about the points.\n   */\n  [BasePointsConfigKeys.PointIncludeColumns]?: string[];\n}\n\nexport interface CosmographLinksConfig {\n  /** The input data for the links.\n   *\n   * {@link CosmographInputData} Accepts `File | string | Table | Uint8Array | ArrayBuffer | Record<string, unknown>[]`\n   */\n  [RequiredLinksConfigKeys.Links]?: CosmographInputData;\n\n  /** The column name for the **source** point of each link. This should match the `pointId` values in the points data. */\n  [RequiredLinksConfigKeys.LinkSource]?: string;\n\n  /** The column name for the index of the **source** point of each link.\n   * This is used for efficient lookups and should match the `pointIndex` values in the points data.\n   */\n  [RequiredLinksConfigKeys.LinkSourceIndex]?: string;\n\n  /** The column name for the **target** point of each link. This should match the `pointId` values in the points data. */\n  [RequiredLinksConfigKeys.LinkTarget]?: string;\n\n  /** The column name for the index of the **target** point of each link.\n   * This is used for efficient lookups and should match the `pointIndex` values in the points data.\n   */\n  [RequiredLinksConfigKeys.LinkTargetIndex]?: string;\n\n  /** The column name for the link color.\n   *\n   * If provided, links will be colored based on the values in this column, which should be either a color `string` or an array of numeric `[r, g, b, a]` values.\n   */\n  [BaseLinksConfigKeys.LinkColor]?: string;\n\n  /** Specifies the function that will be used to generate the color for each link based on the value in the `linkColor` column.\n   * It takes a link record as input and its index, and should return a color `string` or an array of `[r, g, b, a]` values.\n   *\n   * Works only when `linkColor` is provided. Overrides the values in `linkColor` column by processing them (in this case the values in the `linkColor` column can be of any type, not just colors).\n   *\n   * @param {any} value - The value from the `LinkColor` column.\n   * @param {number} index - The index of the link.\n   * @returns {string | [number, number, number, number]} The color as a `string` or an array of `[r, g, b, a]` value to be applied to the link.\n   */\n  [BaseLinksConfigKeys.LinkColorFn]?: AccessorFn<string | [number, number, number, number]>;\n\n  /** The column name for the link width.\n   *\n   * If provided, links will have their widths set based on the values in this column, which should be numeric values.\n   */\n  [BaseLinksConfigKeys.LinkWidth]?: string;\n\n  /** Specifies the function that will be used to generate the width for each link based on the value in the `linkWidth` column.\n   * It takes a link record as input and its index, and should return a numeric value.\n   *\n   * Works only when `linkWidth` is provided. Overrides the values in the `linkWidth` column by processing them (in this case the values in the `linkWidth` column can be of any type, not just numbers).\n   *\n   * @param {any} value - The value from the `LinkWidth` column.\n   * @param {number} index - The index of the link.\n   * @returns {number} The numeric width value to be applied to the link.\n   */\n  [BaseLinksConfigKeys.LinkWidthFn]?: AccessorFn<number>;\n\n  /** The column name that determines whether a link should have an arrow.\n   * If provided, links will have arrows based on the `boolean` values in this column.\n   */\n  [BaseLinksConfigKeys.LinkArrow]?: string;\n\n  /** Specifies the function that determines if a link should have an arrow based on the value in the `linkArrow` column.\n   * It takes a link record as input and its index, and should return a boolean value.\n   *\n   * Works only when `linkArrow` is provided. Overrides the values in the `linkArrow` column by processing them (in this case the values in the `linkArrow` column can be of any type, not just booleans).\n   *\n   * @param {any} value - The value from the `LinkArrow` column.\n   * @param {number} index - The index of the link.\n   * @returns {boolean} A boolean indicating whether the link should have an arrow.\n   */\n  [BaseLinksConfigKeys.LinkArrowFn]?: AccessorFn<boolean>;\n\n  /** The column name for the link strength.\n   * If provided, links will have their strengths set based on the values in this column, which should be numeric values.\n   * Link strength affects the force simulation.\n   */\n  [BaseLinksConfigKeys.LinkStrength]?: string;\n\n  /** Specifies the function that will be used to generate the strength for each link based on the value in the `linkStrength` column.\n   * It takes a link record as input and its index, and should return a numeric value.\n   *\n   * Works only when `linkStrength` is provided. Overrides the values in the `linkStrength` column by processing them (in this case the values in the `linkStrength` column can be of any type, not just numbers).\n   *\n   * @param {any} value - The value from the `LinkStrength` column.\n   * @param {number} index - The index of the link.\n   * @returns {number} The numeric strength value to be applied to the link.\n   */\n  [BaseLinksConfigKeys.LinkStrengthFn]?: AccessorFn<number>;\n\n  /** An array of additional column names to include in the link data.\n   *\n   * These columns will be available on the link objects but not used by Cosmograph directly, can be used as accessors for Cosmograph components. Useful for storing additional information about the links.\n   */\n  [BaseLinksConfigKeys.LinkIncludeColumns]?: string[];\n}\n\n\nexport const pointsConfigKeys = Object.values(BasePointsConfigKeys) as Array<keyof CosmographConfig>\nexport const linksConfigKeys = Object.values(BaseLinksConfigKeys) as Array<keyof CosmographConfig>\nexport const requiredPointsConfigKeys = Object.values(RequiredPointsConfigKeys) as Array<keyof CosmographConfig>\nexport const requiredLinksConfigKeys = Object.values(RequiredLinksConfigKeys) as Array<keyof CosmographConfig>\n\nexport const requiredProps = [\n  ...requiredPointsConfigKeys,\n  ...requiredLinksConfigKeys,\n  BasePointsConfigKeys.PointIncludeColumns, // not required but needed to generate points data\n  BaseLinksConfigKeys.LinkIncludeColumns, // not required but needed to generate links data\n]\n\nexport const unrequiredProps = [\n  ...pointsConfigKeys,\n  ...linksConfigKeys,\n].filter( // remove PointIncludeColumns/LinkIncludeColumns as they don't participate in rendering/setting cosmos buffers\n  key =>\n    key !== BasePointsConfigKeys.PointIncludeColumns &&\n    key !== BaseLinksConfigKeys.LinkIncludeColumns\n)\n\n/**\n * Represents the input data for Cosmograph points or links.\n * This can be an array of objects or a more complex data structure\n * containing information about each point or link to be rendered. Accepts `File`, `string`, `Table` (Apache Arrow), `Uint8Array` (Apache Arrow), `ArrayBuffer` (Apache Arrow), `Record<string, unknown>[]`\n *\n * `string` will be treated as table name in external DuckDB-Wasm instance when `duckDbConnection` is provided to the Cosmograph instance.\n */\nexport type CosmographInputData = File | string | Table | Uint8Array | ArrayBuffer | Record<string, unknown>[]\n\nexport type AccessorFn<T> =\n  ((value: number, i?: number) => T) |\n  ((value: string, i?: number) => T) |\n  ((value: boolean, i?: number) => T) |\n  ((value: Date, i?: number) => T)\n\nexport interface CosmographDataConfig extends CosmographPointsConfig, CosmographLinksConfig {}\n",
    "cosmograph/labels.ts": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { CosmographCustomLabel } from '../labels'\nimport { CosmographConfig } from './config'\nimport { AccessorFn, BasePointsConfigKeys } from './data'\n\nexport const LabelsKeys = {\n  ShowDynamicLabels: 'showDynamicLabels',\n  ShowLabelsFor: 'showLabelsFor',\n  ShowTopLabels: 'showTopLabels',\n  ShowTopLabelsLimit: 'showTopLabelsLimit',\n  ShowTopLabelsBy: 'showTopLabelsBy',\n  PointLabelClassName: 'pointLabelClassName',\n  PointLabelFn: 'pointLabelFn',\n  PointLabelWeightFn: 'pointLabelWeightFn',\n  StaticLabelWeight: 'staticLabelWeight',\n  DynamicLabelWeight: 'dynamicLabelWeight',\n  LabelMargin: 'labelMargin',\n  LabelPadding: 'labelPadding',\n  CustomLabels: 'customLabels',\n} as const\n\nexport const HoveredLabelsKeys = {\n  ShowHoveredPointLabel: 'showHoveredPointLabel',\n  HoveredPointLabelClassName: 'hoveredPointLabelClassName',\n} as const\n\nexport interface LabelsCosmographConfig {\n  /**\n   * Show labels for the points that are currently visible on the screen,\n   * and automatically update to reflect the current zoom level.\n   *\n   * Works only when `pointLabel` is provided.\n   * Default: `false`\n   */\n  [LabelsKeys.ShowDynamicLabels]?: boolean;\n\n  /**\n   * An array of point ids to show labels for.\n   *\n   * Works only when `pointLabel` is provided.\n   * Default: `undefined`\n   */\n  [LabelsKeys.ShowLabelsFor]?: string[];\n\n  /**\n   * Show labels for the top points.\n   * Works only when `pointLabel` is provided.\n   * Default: `false`\n   */\n  [LabelsKeys.ShowTopLabels]?: boolean;\n\n  /**\n   * Sets the maximum number of top points to show labels for.\n   * Default: `100`\n   */\n  [LabelsKeys.ShowTopLabelsLimit]?: number;\n\n  /**\n   * Specify the numeric column that is used to determine the top points that will be sorted by. If not provided, the top points will be sorted by their total links count.\n   *\n   * Works only when `pointLabel` is provided.\n   * Default: `undefined`\n   */\n  [LabelsKeys.ShowTopLabelsBy]?: string;\n\n  /**\n   * Specifies the function that will be used to generate the labels based on `pointLabel` column. It should return a `string`.\n   *\n   * Works only when `pointLabel` is provided. Overrides the values specified in `pointLabel` column by processing them.\n   *\n   * @param {any} value - The value from the `pointLabel` column.\n   * @param {number} index - The index of the point.\n   * @returns {string} \u2014 The text of label.\n   */\n  [LabelsKeys.PointLabelFn]?: AccessorFn<string>;\n\n  /**\n   * Specifies the function that will be used to generate the label weights. Should return a `number` between 0 and 1.\n   *\n   * Works only when `pointLabelWeight` is provided. Overrides the values specified in `pointLabelWeight` column by processing them.\n   *\n   * @param {any} value - The value from the `pointLabelWeight` column.\n   * @param {number} index - The index of the point.\n   * @returns {number} \u2014 The label weight value to be applied to the point label.\n   */\n  [LabelsKeys.PointLabelWeightFn]?: AccessorFn<number>;\n\n  /**\n   * Specifies the CSS class to use for the point labels.\n   * This can either be a string specifying a fixed CSS class name or a function that returns a CSS class name based on the point index and optional point ID.\n   *\n   * @param {number} pointIndex - The index of the point.\n   * @param {string} [pointId] - The optional ID of the point.\n   * @returns {string} \u2014 The CSS class to be applied to the point label.\n   */\n  [LabelsKeys.PointLabelClassName]?: string | ((text: string, pointIndex: number, pointId?: string) => string);\n\n  /**\n   * Specifies the weight of the static labels.\n   * Default: `0.8`\n   */\n  [LabelsKeys.StaticLabelWeight]?: number;\n\n  /**\n   * Specifies the weight of the dynamic labels.\n   * Default: `0.7`\n   */\n  [LabelsKeys.DynamicLabelWeight]?: number;\n\n  /**\n   * Specifies the margin between the label and the point.\n   * Default: `5`\n   */\n  [LabelsKeys.LabelMargin]?: number;\n\n  /**\n   * Specifies the padding of the label element.\n   * Default: `{ left: 7, top: 4, right: 7, bottom: 4 }`\n   */\n  [LabelsKeys.LabelPadding]?: {top: number; left: number; right: number; bottom: number};\n\n  /**\n   * Specifies an array of custom labels to be displayed on the Cosmograph canvas.\n   * Each custom label is defined by the `CosmographCustomLabel` type, which includes properties for the label text, position, weight and optional CSS class.\n   */\n  [LabelsKeys.CustomLabels]?: CosmographCustomLabel[];\n  /**\n   * Whether to show a hovered point label.\n   * Default: `false`\n   */\n  [HoveredLabelsKeys.ShowHoveredPointLabel]?: boolean;\n\n  /**\n   * Specifies the CSS class to use for the hovered point label.\n   * This can either be a string specifying a fixed CSS class name or a function that returns a CSS class name based on the point index and optional point ID.\n   *\n   * @param {number} pointIndex - The index of the point.\n   * @param {string} [pointId] - The optional ID of the point.\n   * @returns {string} \u2014 The CSS class to be applied to the point label.\n   */\n  [HoveredLabelsKeys.HoveredPointLabelClassName]?: string | ((text: string, pointIndex: number, pointId?: string) => string);\n}\n\nexport const labelsUpdateKeys = [...Object.values(LabelsKeys), BasePointsConfigKeys.PointLabel, BasePointsConfigKeys.PointLabelWeight] as Array<keyof CosmographConfig>\n",
    "cosmograph/simulation.ts": "import { GraphSimulationSettings } from '@cosmograph/cosmos'\n\nexport interface SimulationConfig {\n  /**\n   * Decay coefficient. Use bigger values if you want the simulation to \"cool down\" slower.\n   * Default value: `5000`\n   */\n  simulationDecay?: GraphSimulationSettings['decay'];\n\n  /**\n   * Gravity force coefficient.\n   * Default value: `0.25`\n   */\n  simulationGravity?: GraphSimulationSettings['gravity'];\n\n  /**\n   * Centering to center mass force coefficient.\n   * Default value: `0`\n   */\n  simulationCenter?: GraphSimulationSettings['center'];\n\n  /**\n   * Repulsion force coefficient.\n   * Default value: `1.0`\n   */\n  simulationRepulsion?: GraphSimulationSettings['repulsion'];\n\n  /**\n   * Decreases / increases the detalization of the Many-Body force calculations.\n   * When `useQuadtree` is set to `true`, this property corresponds to the Barnes\u2013Hut approximation criterion.\n   * Default value: `1.15`\n   */\n  simulationRepulsionTheta?: GraphSimulationSettings['repulsionTheta'];\n\n  /**\n   * Barnes\u2013Hut approximation depth.\n   * Can only be used when `useQuadtree` is set `true`.\n   * Default value: `12`\n   */\n  simulationRepulsionQuadtreeLevels?: GraphSimulationSettings['repulsionQuadtreeLevels'];\n\n  /**\n   * Link spring force coefficient.\n   * Default value: `1`\n   */\n  simulationLinkSpring?: GraphSimulationSettings['linkSpring'];\n\n  /**\n   * Minimum link distance.\n   * Default value: `10`\n   */\n  simulationLinkDistance?: GraphSimulationSettings['linkDistance'];\n\n  /**\n   * Range of random link distance values.\n   * Default value: `[1, 1.2]`\n   */\n  simulationLinkDistRandomVariationRange?: GraphSimulationSettings['linkDistRandomVariationRange'];\n\n  /**\n   * Repulsion coefficient from mouse position.\n   * The repulsion force is activated by pressing the right mouse button.\n   * Default value: `2`\n   */\n  simulationRepulsionFromMouse?: GraphSimulationSettings['repulsionFromMouse'];\n\n  /**\n   * Friction coefficient.\n   * Default value: `0.85`\n   */\n  simulationFriction?: GraphSimulationSettings['friction'];\n\n  /**\n   * Coefficient of simulation impulse from 0 to 1. If `undefined`, the graph will not apply a new impulse to the renders during adding or removing data items, but instead will use the current simulation impulse value from the graph. Has no impact if `disableSimulation` is `true`.\n   * Default value: `undefined`.\n   */\n  simulationImpulse?: number;\n}\n\nexport interface SimulationEventConfig {\n  /** Callback function that will be called when the simulation starts. */\n  onSimulationStart?: GraphSimulationSettings['onStart'];\n\n  /** Callback function that will be called when the simulation stops. */\n  onSimulationEnd?: GraphSimulationSettings['onEnd'];\n\n  /** Callback function that will be called when the simulation is paused. */\n  onSimulationPause?: GraphSimulationSettings['onPause'];\n\n  /** Callback function that will be called when the simulation is restarted. */\n  onSimulationRestart?: GraphSimulationSettings['onRestart'];\n\n  /** Callback function that will be called on every tick of the simulation.\n   *\n   * @param {number} alpha - The value of alpha will decrease over time as the simulation \"cools down\".\n   * @param {number | undefined} index - The index of the hovered point.\n   * @param {[number, number] | undefined} pointPosition - The position of the point under the cursor.\n   */\n  onSimulationTick?: GraphSimulationSettings['onTick'];\n}\n",
    "cosmograph/configuration.mdx": "## Data and Configuration Parameters\n\nThe Cosmograph widget builds upon the native Cosmograph library, inheriting most of its configuration parameters, most of which are optional and can be modified in real-time. For detailed insights about configuration parameters, refer to the [documentation](../lib/api/interfaces/CosmographConfig.mdx).\n\n### Minimal Configuration for Points\n\nTo render a graph, the following minimal configuration is required:\n\n- **`points`**: Data in a pandas DataFrame format.\n- **`point_id`**: Unique identifier column for each point.\n- **`point_index`**: Ordinal index of each point ranging from 0 to x (the number of unique points).\n\n### Additional Points Configuration\n\n- **`point_color`**: Column name for point colors.\n- **`point_size`**: Column name for point sizes.\n- **`point_label`**: Column name for associated point labels.\n- **`point_label_weight`**: Column name for point label weights.\n- **`point_x`**: Column name for the x-coordinate.\n- **`point_y`**: Column name for the y-coordinate.\n- **`point_include_columns`**: An array of additional column names to include in point data.\n\n### Minimal Configuration for Links\n\nTo define links, the following fields are necessary:\n\n- **`links`**: Data in a pandas DataFrame format.\n- **`link_source`**: Column with the unique identifier for source points.\n- **`link_source_index`**: Index column of the source point, corresponding to `point_index`.\n- **`link_target`**: Column with the unique identifier for target points.\n- **`link_target_index`**: Index column of the target point, corresponding to `point_index`.\n\n### Additional Links Configuration\n\n- **`link_color`**: Column name for link colors.\n- **`link_width`**: Column name for link widths.\n- **`link_arrow`**: Column name that indicates links with arrows.\n- **`link_strength`**: Column name for link strengths.\n- **`link_include_columns`**: An array of additional column names to include in link data.\n\n### Simulation Settings\n\nVarious simulation settings allow for detailed customization:\n\n- **`disable_simulation`**: Prevents the simulation from running, merely rendering the graph. Default: `None`.\n- **`simulation_decay`**: Defines how quickly the simulation cools down. Default: `1000`.\n- **`simulation_gravity`**: Coefficient for gravity force. Default: `0`.\n- **`simulation_center`**: Centers the mass force coefficient. Default: `0`.\n- **`simulation_repulsion`**: Configures point repulsion between points. Default: `0.1`.\n- **`simulation_repulsion_theta`**: Decreases / increases the detalization of the Many-Body force calculations. When\u00a0`useQuadtree`\u00a0is set to\u00a0`True`, this property corresponds to the Barnes\u2013Hut approximation criterion. Default: `1.7`.\n- **`simulation_link_spring`**: Spring constant for links. Default value:\u00a0`1`.\n- **`simulation_link_distance`**: Default distance for links. Default value:\u00a0`2`.\n- **`simulation_link_dist_random_variation_range`**: Random link distance range. Default value:\u00a0`[1, 1.2]`.\n- **`simulation_repulsion_from_mouse`**: \u00a0Mouse position repulsion coefficient, activated by right-click. Default value:\u00a0`2`.\n- **`simulation_friction`**: Sets simulation friction. Default value:\u00a0`0.85`.\n\n### Quadtree algorithm settings\n\n- **`use_quadtree`**: Activates quadtree algorithm for Many-Body force when set to `True`. Default value:\u00a0`False`.\n- **`simulation_repulsion_quadtree_levels`**: Barnes\u2013Hut approximation depth, usable when `useQuadtree` is set to `True`. Default value:\u00a0`12`.\n\n### Graph Appearance\n\nCustomize the widget\u2019s visual aspects:\n\n- **`background_color`**: Canvas background color. Default value: `'#222222'`.\n- **`space_size`**: Size of the simulation space. Default value: `4096`.\n- **`default_point_color`**: Default point size when `point_color` not specified. Default value: `'#b3b3b3'`.\n- **`point_greyout_opacity`**: Opacity of unselected nodes during selection. Default value: `0.1`.\n- **`default_point_size`**: The default size value to use for points when no `point_size` are provided. Default: `4`.\n- **`point_size_scale`**: Scale factor for point sizes. Default value: `1`.\n- **`hovered_point_cursor`**: Cursor type when hovering over a point. Default value: `'auto'`.\n- **`render_hovered_point_ring`**: Enables ring around hovered points. Default value: `False`.\n- **`hovered_point_ring_color`**: Color of hovered point ring. Default value: `'white'`.\n- **`focused_point_ring_color`**: Color of the focused point ring. Default value: `'white'`.\n- **`focused_point_index`**: Index of the focused point, prioritized over `focus_point` method. Default value: `None`.\n- **`render_links`**: Enables or disables link rendering. Default value: `True`.\n- **`default_link_color`**: Default link color when `link_color` not specified. Default value: `'#666666'`.\n- **`link_greyout_opacity`**: Opacity of unselected links during selection. Default value: `0.1`.\n- **`default_link_width`**: Default link width when `link_width` not specified. Default value: `1`.\n- **`link_width_scale`**: Scale factor for link widths. Default value: `1`.\n- **`curved_links`**: Enables or disables curved links. Default value: `False`.\n- **`curved_link_segments`**: Segments defining curved links. Default value: `19`.\n- **`curved_link_weight`**: Weight factor for link curvature. Default value: `0.8`.\n- **`curved_link_control_point_distance`**: Control point positioning for curves. If set to 1 then the control point is at a distance equal to the length of the line. Default value: `0.5`.\n- **`default_link_arrows`**: Enables or disables arrows on links when `link_arrow` not specified. Default value: `False`.\n- **`link_arrows_size_scale`**: Scale factor for link arrow size. Default value: `1`.\n- **`link_visibility_distance_range`**: Pixel distance range for link transparency. Default value: `[50, 150]`.\n- **`link_visibility_min_transparency`**: Minimum transparency of links based on `link_visibility_distance_range`. Default value: `0.25`.\n- **`scale_points_on_zoom`**: Scales point sizes when zooming. Default value: `True`.\n- **`initial_zoom_level`**: Starting zoom level. Default value: `None`.\n- **`disable_zoom`**: Enables or disables zooming. Default value: `False`.\n- **`enable_drag`**: Allows graph dragging. Default value: `False`.\n- **`fit_view_on_init`**: Automatically fits view to all points upon initialization. Default value: `True`.\n- **`fit_view_delay`**: Delay for fitting view after initialization in milliseconds. Default value: `250`.\n- **`fit_view_padding`**: Padding around fit view area. Default value: `0.1`.\n- **`fit_view_duration`**: Animation duration for view fitting in milliseconds. Default value: `250`.\n- **`fit_view_by_points_in_rect`**: Fits view to specified rectangle of points, active when `fit_view_on_init` is `True`. Default value: `None`.\n\n### Label Options\n\nControl label display on the graph:\n\n- **`show_dynamic_labels`**: Flag to show dynamic labels for visible points. Default value:\u00a0`False`.\n- **`show_labels_for`**: An array of point ids for which to show labels. Default value: `None`.\n- **`show_top_labels`**: Flag to display labels for the top points. Default values: `False`.\n- **`show_top_labels_limit`**: Maximum number of top points to show labels for. Default value:\u00a0`100`.\n- **`show_top_labels_by`**: Column to determine which points are considered as a top. If not provided, the top points will be sorted by their total links count. Default value: `None`.\n- **`static_label_weight`**: Weight of static labels. Default value:\u00a0`0.8`.\n- **`dynamic_label_weight`**: Weight of dynamic labels. Default value:\u00a0`0.7`.\n- **`label_padding`**: Padding around labels in the graph.\n- **`show_hovered_point_label`**: Flag to display the label for the currently hovered point. Default value: `False`.\n\n### Additional Parameters\n\nVarious additional parameters enhance functionality:\n\n- **`show_FPS_monitor`**: Display an FPS counter in the upper right corner of the canvas. Default value: `False`.\n- **`pixel_ratio`**: Canvas pixel ratio. Default value: `2`.\n- **`random_seed`**: Seed value for generating random numbers in simulations. Default value: `None`.\n- **`point_sampling_distance`**: Distance threshold for sampling points. Default value: `150`.\n\n## Methods and Values\n\nThe Cosmograph widget provides several methods for data interaction:\n\n- **`select_point_by_index(index)`**: Selects point by index.\n- **`select_points_by_indices(indices)`**: Selects points by indices.\n- **`activate_rect_selection()`**: Activates rectangular selection.\n- **`deactivate_rect_selection()`**: Deactivates rectangular selection.\n- **`fit_view()`**: Center and zoom in/out the view to fit all points in the scene.\n- **`fit_view_by_indices(indices, duration, padding)`**: Center and zoom in/out the viewport to fit points by their indices.\n- **`fit_view_by_coordinates(coordinates, duration, padding)`**: Fit the given coordinates into the viewport.\n- **`focus_point(index)`**: Set focus on a point by index. A ring will be drawn around the focused point.\n- **`start(alpha)`**: Starts the simulation.\n- **`pause()`**: Pause the simulation.\n- **`restart()`**: Restarts the simulation.\n- **`step()`**: Render only one frame of the simulation.\n\n#### Values\n\n- **`clicked_point_index`**: Point index that currently clicked.\n- **`selected_point_indices`**: Point indices that currently selected.\n\n#### Legends\n- **`disable_point_color_legend`**: Disable point color legend.\n- **`disable_point_size_legend`**: Disable point size legend.\n- **`disable_link_color_legend`**: Disable link color legend.\n- **`disable_link_width_legend`**: Disable link width legend.\n"
}